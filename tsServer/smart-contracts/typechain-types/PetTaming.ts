/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PetTaming {
  export type TamingAttemptStruct = {
    user: string;
    nft: string;
    tameScale: BigNumberish;
  };

  export type TamingAttemptStructOutput = [
    user: string,
    nft: string,
    tameScale: bigint
  ] & { user: string; nft: string; tameScale: bigint };
}

export interface PetTamingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "attempts"
      | "getAllAttempts"
      | "getLatestAttempt"
      | "recordTamingAttempt"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TamingAttemptRecorded"): EventFragment;

  encodeFunctionData(
    functionFragment: "attempts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAttempts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestAttempt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordTamingAttempt",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "attempts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllAttempts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestAttempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordTamingAttempt",
    data: BytesLike
  ): Result;
}

export namespace TamingAttemptRecordedEvent {
  export type InputTuple = [user: string, nft: string, tameScale: BigNumberish];
  export type OutputTuple = [user: string, nft: string, tameScale: bigint];
  export interface OutputObject {
    user: string;
    nft: string;
    tameScale: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PetTaming extends BaseContract {
  connect(runner?: ContractRunner | null): PetTaming;
  waitForDeployment(): Promise<this>;

  interface: PetTamingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attempts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        user: string;
        nft: string;
        tameScale: bigint;
      }
    ],
    "view"
  >;

  getAllAttempts: TypedContractMethod<
    [],
    [PetTaming.TamingAttemptStructOutput[]],
    "view"
  >;

  getLatestAttempt: TypedContractMethod<
    [],
    [PetTaming.TamingAttemptStructOutput],
    "view"
  >;

  recordTamingAttempt: TypedContractMethod<
    [_user: string, _nft: string, _tameScale: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attempts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        user: string;
        nft: string;
        tameScale: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllAttempts"
  ): TypedContractMethod<[], [PetTaming.TamingAttemptStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getLatestAttempt"
  ): TypedContractMethod<[], [PetTaming.TamingAttemptStructOutput], "view">;
  getFunction(
    nameOrSignature: "recordTamingAttempt"
  ): TypedContractMethod<
    [_user: string, _nft: string, _tameScale: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "TamingAttemptRecorded"
  ): TypedContractEvent<
    TamingAttemptRecordedEvent.InputTuple,
    TamingAttemptRecordedEvent.OutputTuple,
    TamingAttemptRecordedEvent.OutputObject
  >;

  filters: {
    "TamingAttemptRecorded(string,string,uint8)": TypedContractEvent<
      TamingAttemptRecordedEvent.InputTuple,
      TamingAttemptRecordedEvent.OutputTuple,
      TamingAttemptRecordedEvent.OutputObject
    >;
    TamingAttemptRecorded: TypedContractEvent<
      TamingAttemptRecordedEvent.InputTuple,
      TamingAttemptRecordedEvent.OutputTuple,
      TamingAttemptRecordedEvent.OutputObject
    >;
  };
}
